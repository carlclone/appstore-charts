rbac:
  # Specifies whether RBAC resources should be created
  create: false
  # Specifies whether a PodSecurityPolicy should be created
  pspEnabled: false
serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: false
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

replicaCount: 1
image:
  repository: registry.cn-beijing.aliyuncs.com/kubegemsapp/redis_exporter
  tag: v1.27.0
  pullPolicy: IfNotPresent

nameOverride: redis-exporter
fullnameOverride: redis-exporter

extraArgs: {}

customLabels: {}

securityContext: {}

# Additional Environment variables
env: {}
# - name: REDIS_PASSWORD
#   valueFrom:
#     secretKeyRef:
#       key: redis-password
#       name: redis-config-0.0.2
service:
  type: ClusterIP
  port: 9121
  annotations: {}
  labels: {}
    # prometheus.io/path: /metrics
    # prometheus.io/port: "9121"
    # prometheus.io/scrape: "true"
resources: 
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 20m
    memory: 64Mi

nodeSelector: {}

tolerations: []

affinity: {}

redisAddress: redis://redis:6379
annotations: {}
labels: {}
#  prometheus.io/path: /metrics
#  prometheus.io/port: "9121"
#  prometheus.io/scrape: "true"

redisAddressConfig:
  # Use config from configmap
  enabled: false
  # Use existing configmap (ignores redisAddress)
  configmap:
    name: ""
    key: ""

serviceMonitor:
  # When set true then use a ServiceMonitor to configure scraping
  enabled: true
  # Set the namespace the ServiceMonitor should be deployed
  # namespace: monitoring
  # Set how frequently Prometheus should scrape
  interval: 60s
  # Set path to redis-exporter telemtery-path
  telemetryPath: /metrics
  # Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator
  # labels:
  # Set timeout for scrape
  timeout: 10s
  # Set relabel_configs as per https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
  # relabelings: []
  # Set of labels to transfer on the Kubernetes Service onto the target.
  # targetLabels: []
  # metricRelabelings: []

## Custom PrometheusRules to be defined
## The value is evaluated as a template, so, for example, the value can depend on .Release or .Chart
## ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions
prometheusRule:
  enabled: true
  additionalLabels: 
     prometheusRule: gemcloud
  rules: 
    - alert: RedisDown
      expr: redis_up{service="{{ template "prometheus-redis-exporter.fullname" . }}",namespace="{{ .Release.Namespace }}"} == 0
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: Redis instance {{ "{{ $labels.instance }}" }} down
        description: Redis instance {{ "{{ $labels.instance }}" }} is down.
    - alert: RedisMemoryHigh
      expr: >
         redis_memory_used_bytes{service="{{ template "prometheus-redis-exporter.fullname" . }}",namespace="{{ .Release.Namespace }}"} * 100
         /
         redis_memory_max_bytes{service="{{ template "prometheus-redis-exporter.fullname" . }}",namespace="{{ .Release.Namespace }}"}
         > 90 <= 100
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: Redis instance {{ "{{ $labels.instance }}" }} is using too much memory
        description: Redis instance is using {{ "{{ $value }}" }}% of its available memory.
    - alert: RedisTooManyConnections
      expr: >
         redis_connected_clients{service="{{ template "prometheus-redis-exporter.fullname" . }}",namespace="{{ .Release.Namespace }}"} 
         / redis_config_maxclients{service="{{ template "prometheus-redis-exporter.fullname" . }}",namespace="{{ .Release.Namespace }}"} * 100
         > 60
      for: 5m
      labels:
        severity: warning
      annotations:
         summary: Redis too many connections instance {{ "{{ $labels.instance }}" }}
         description: Redis instance has too many connections  VALUE ={{ "{{ $value }}" }}%  LABELS = {{ "{{ $labels }}" }}
    - alert: RedisRejectedConnections
      expr: increase(redis_rejected_connections_total{service="{{ template "prometheus-redis-exporter.fullname" . }}",namespace="{{ .Release.Namespace }}"}[1m]) > 0
      for: 0m
      labels:
        severity: critical
      annotations:
        summary: Redis rejected connections instance {{ "{{ $labels.instance }}" }}
        description: last {{ "{{ $value }}" }} connections to Redis has been rejected

# Used to mount a LUA-Script via config map and use it for metrics-collection
# script:
#   configmap: prometheus-redis-exporter-script
#   keyname: script

auth:
  # Use password authentication
  enabled: true
  # Use existing secret (ignores redisPassword)
  secret:
    name: ""
    key: ""
  # Redis password (when not stored in a secret)
  redisPassword: "password"
