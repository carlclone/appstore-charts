# Default values for prometheus-memcached-exporter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: registry.cn-beijing.aliyuncs.com/kubegemsapp/memcached-exporter
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.6.0-debian-10-r28"

memcachedAddress: memcached:11211
imagePullSecrets: []
nameOverride: "memecached-exporter"
fullnameOverride: "memecached-exporter"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 9150

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 20m
    memory: 64Mi

nodeSelector: {}

tolerations: []

affinity: {}

serviceMonitor:
  enabled: true
  # prometheus port & scrape path
  port: metrics
  scrapePath: /metrics
  # Set the namespace the ServiceMonitor should be deployed
  # namespace: monitoring
  # Set how frequently Prometheus should scrape
  interval: 60s
  # Set path to redis-exporter telemtery-path
  telemetryPath: /metrics
  # Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator
  labels: {}
  # Set timeout for scrape
  timeout: 10s
  
prometheusRule:
  ## If true, a PrometheusRule CRD is created for a prometheus operator
  ## https://github.com/coreos/prometheus-operator
  ##
  ## The rules will be processed as Helm template, allowing to set variables in them.
  enabled: true
  #  namespace: monitoring
  rules: 
    - alert: MemcachedDown
      expr: memcached_up{service="{{ include "prometheus-memcached-exporter.fullname" . }}",namespace="{{ .Release.Namespace }}"} == 0
      for: 0m
      labels:
        severity: critical
      annotations:
        description:  Memcached Down instance {{ "{{ $labels.instance }}" }}
        summary: Memcached instance is down {{ "{{ $labels.instance }}" }}
    - alert: MemcachedLowAvalibleConnections
      expr: >
        memcached_current_connections{service="{{ include "prometheus-memcached-exporter.fullname" . }}",namespace="{{ .Release.Namespace }}"}
        / memcached_max_connections{service="{{ include "prometheus-memcached-exporter.fullname" . }}",namespace="{{ .Release.Namespace }}"}
        * 100 > 90
      for: 0m
      labels:
        severity: warning
      annotations:
        summary: > 
          memcached few available connections instance {{ "{{ $labels.instance }}" }}
        description: few availabel connections < 100 VALUE ={{ "{{ $value }}" }}  LABELS = {{ "{{ $labels }}" }}