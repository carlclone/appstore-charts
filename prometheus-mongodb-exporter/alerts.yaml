# used for generate prometheusrule and alertmanagerconfig
- name: MongodbDown
  namespace: __namespace__
  expr: mongodb_up{service="__fullname__",namespace="__namespace__"}
  message: MongoDB instance {{ $labels.instance }} down
  for: 0m
  alertLevels:
    - compareOp: "=="
      compareValue: "0"
      severity: critical
  receivers:
    - name: gemcloud-default-webhook
      interval: 10m
- name: MongodbTooManyConnections
  namespace: __namespace__
  expr: avg by(instance) (rate(mongodb_connections{state="current",service="__fullname__",namespace="__namespace__"}[1m])) / avg by(instance) (sum (mongodb_connections{service="__fullname__",namespace="__namespace__"})) * 100
  message: MongoDB too many connections instance {{ $labels.instance }}
  for: 5m
  alertLevels:
    - compareOp: ">"
      compareValue: "80"
      severity: error
  receivers:
    - name: gemcloud-default-webhook
      interval: 10m
- name: MongodbLowAvalibleConnections
  namespace: __namespace__
  expr: mongodb_connections{state="available",service="__fullname__",namespace="__namespace__"}
  message: MongoDB few available connections instance {{ $labels.instance }}
  for: 5m
  alertLevels:
    - compareOp: "<"
      compareValue: "100"
      severity: critical
  receivers:
    - name: gemcloud-default-webhook
      interval: 10m
- name: MongodbTooManyMemories
  namespace: __namespace__
  expr: mongodb_mongod_wiredtiger_cache_bytes{type="total",service="__fullname__",namespace="__namespace__"} / on(pod,namespace,instance,job,service) mongodb_mongod_wiredtiger_cache_max_bytes{service="__fullname__",namespace="__namespace__"} * 100
  message: MongoDB too many memories instance {{ $labels.instance }}
  for: 5m
  alertLevels:
    - compareOp: ">"
      compareValue: "80"
      severity: error
    - compareOp: ">"
      compareValue: "90"
      severity: critical
  inhibitLabels: [instance]
  receivers:
    - name: gemcloud-default-webhook
      interval: 10m
