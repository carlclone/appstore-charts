#âžœ  cloud-kafka git:(master) helm template -name my-kafka -n kafka-test .
---
# Source: cloud-kafka/charts/zookeeper/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: my-kafka-zookeeper
  namespace: kafka-test
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-5.2.0
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/instance: my-kafka
      app.kubernetes.io/component: zookeeper
  maxUnavailable: 1
---
# Source: cloud-kafka/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: my-kafka-cloud-kafka
  namespace: kafka-test
  labels:
    app.kubernetes.io/name: cloud-kafka
    helm.sh/chart: cloud-kafka-7.0.5
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kafka
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cloud-kafka
      app.kubernetes.io/instance: my-kafka
      app.kubernetes.io/component: kafka
  maxUnavailable: 1
---
# Source: cloud-kafka/templates/jmx-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-kafka-cloud-kafka-jmx-configuration
  namespace: kafka-test
  labels:
    app.kubernetes.io/name: cloud-kafka
    helm.sh/chart: cloud-kafka-7.0.5
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/managed-by: Helm
data:
  jmx-kafka-prometheus.yml: |+
    jmxUrl: service:jmx:rmi:///jndi/rmi://127.0.0.1:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    
    whitelistObjectNames: ["kafka.controller:*","kafka.server:*","java.lang:*","kafka.network:*","kafka.log:*"]
    
    rules:
      - pattern: kafka.controller<type=(ControllerChannelManager), name=(QueueSize), broker-id=(\d+)><>(Value)
        name: kafka_controller_$1_$2_$4
        labels:
          broker_id: "$3"
      - pattern: kafka.controller<type=(ControllerChannelManager), name=(TotalQueueSize)><>(Value)
        name: kafka_controller_$1_$2_$3
      - pattern: kafka.controller<type=(KafkaController), name=(.+)><>(Value)
        name: kafka_controller_$1_$2_$3
      - pattern: kafka.controller<type=(ControllerStats), name=(.+)><>(Count)
        name: kafka_controller_$1_$2_$3
      - pattern: kafka.server<type=(ReplicaFetcherManager), name=(.+), clientId=(.+)><>(Value)
        name: kafka_server_$1_$2_$4
        labels:
          client_id: "$3"
      - pattern : kafka.network<type=(Processor), name=(IdlePercent), networkProcessor=(.+)><>(Value)
        name: kafka_network_$1_$2_$4
        labels:
          network_processor: $3
      - pattern : kafka.network<type=(RequestMetrics), name=(RequestsPerSec), request=(.+)><>(Count)
        name: kafka_network_$1_$2_$4
        labels:
          request: $3
      - pattern: kafka.server<type=(.+), name=(.+), topic=(.+)><>(Count|OneMinuteRate)
        name: kafka_server_$1_$2_$4
        labels:
          topic: $3
      - pattern: kafka.server<type=(DelayedOperationPurgatory), name=(.+), delayedOperation=(.+)><>(Value)
        name: kafka_server_$1_$2_$3_$4
      - pattern: kafka.server<type=(.+), name=(.+)><>(Count|Value|OneMinuteRate)
        name: kafka_server_$1_total_$2_$3
      - pattern: kafka.server<type=(.+)><>(queue-size)
        name: kafka_server_$1_$2
      - pattern: java.lang<type=(.+), name=(.+)><(.+)>(\w+)
        name: java_lang_$1_$4_$3_$2
      - pattern: java.lang<type=(.+), name=(.+)><>(\w+)
        name: java_lang_$1_$3_$2
      - pattern : java.lang<type=(.*)>
      - pattern: kafka.log<type=(.+), name=(.+), topic=(.+), partition=(.+)><>Value
        name: kafka_log_$1_$2
        labels:
          topic: $3
          partition: $4
---
# Source: cloud-kafka/charts/zookeeper/templates/metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-kafka-zookeeper-exporter
  namespace: kafka-test
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-5.2.0
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
spec:
  type: ClusterIP
  ports:
    - name: metrics
      port: 9141
      targetPort: metrics
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/component: metrics
---
# Source: cloud-kafka/charts/zookeeper/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-kafka-zookeeper-headless
  namespace: kafka-test
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-5.2.0
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: client
      port: 2181
      targetPort: client
    - name: follower
      port: 2888
      targetPort: follower
    - name: election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/component: zookeeper
---
# Source: cloud-kafka/charts/zookeeper/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-kafka-zookeeper
  namespace: kafka-test
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-5.2.0
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  ports:
    - name: client
      port: 2181
      targetPort: client
    - name: follower
      port: 2888
      targetPort: follower
    - name: election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/component: zookeeper
---
# Source: cloud-kafka/templates/kafka-jmx-metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-kafka-cloud-kafka-jmx-metrics
  namespace: kafka-test
  labels:
    app.kubernetes.io/name: cloud-kafka
    helm.sh/chart: cloud-kafka-7.0.5
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kafka
  annotations: 
    prometheus.io/path: /
    prometheus.io/port: '5556'
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
    - name: metrics
      port: 5556
      targetPort: metrics
      nodePort: null
  selector:
    app.kubernetes.io/name: cloud-kafka
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/component: kafka
---
# Source: cloud-kafka/templates/kafka-metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-kafka-cloud-kafka-metrics
  namespace: kafka-test
  labels:
    app.kubernetes.io/name: cloud-kafka
    helm.sh/chart: cloud-kafka-7.0.5
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
  annotations: 
    prometheus.io/path: /metrics
    prometheus.io/port: '9308'
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
    - name: metrics
      port: 9308
      targetPort: metrics
      nodePort: null
  selector:
    app.kubernetes.io/name: cloud-kafka
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/component: metrics
---
# Source: cloud-kafka/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-kafka-cloud-kafka-headless
  namespace: kafka-test
  labels:
    app.kubernetes.io/name: cloud-kafka
    helm.sh/chart: cloud-kafka-7.0.5
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kafka
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: kafka
      port: 9092
      targetPort: kafka
  selector:
    app.kubernetes.io/name: cloud-kafka
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/component: kafka
---
# Source: cloud-kafka/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-kafka-cloud-kafka
  namespace: kafka-test
  labels:
    app.kubernetes.io/name: cloud-kafka
    helm.sh/chart: cloud-kafka-7.0.5
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kafka
  annotations: 
    {}
spec:
  type: ClusterIP
  ports:
    - name: kafka
      port: 9092
      targetPort: kafka
  selector:
    app.kubernetes.io/name: cloud-kafka
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/component: kafka
---
# Source: cloud-kafka/charts/zookeeper/templates/metrics-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-kafka-zookeeper-exporter
  namespace: kafka-test
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-5.2.0
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/instance: my-kafka
  template:
    metadata:
      annotations:
        prometheus.io/port: "9141"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: zookeeper
        helm.sh/chart: zookeeper-5.2.0
        app.kubernetes.io/instance: my-kafka
        app.kubernetes.io/managed-by: Helm
    spec:
      
      containers:
        - image: docker.io/helm/zookeeper-exporter:0.1.2
          name: zookeeper-exporter
          command:
            - /usr/local/bin/zookeeper-exporter
            - -timeout
            - "3"
            - -zk-list
            - my-kafka-zookeeper-0.my-kafka-zookeeper-headless.kafka-test.svc.cluster.local:2181,my-kafka-zookeeper-1.my-kafka-zookeeper-headless.kafka-test.svc.cluster.local:2181,my-kafka-zookeeper-2.my-kafka-zookeeper-headless.kafka-test.svc.cluster.local:2181
          ports:
            - name: metrics
              containerPort: 8080
          livenessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 180
          readinessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 15
---
# Source: cloud-kafka/templates/kafka-exporter.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-kafka-cloud-kafka-exporter
  namespace: kafka-test
  labels:
    app.kubernetes.io/name: cloud-kafka
    helm.sh/chart: cloud-kafka-7.0.5
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cloud-kafka
      app.kubernetes.io/instance: my-kafka
      app.kubernetes.io/component: metrics
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cloud-kafka
        helm.sh/chart: cloud-kafka-7.0.5
        app.kubernetes.io/instance: my-kafka
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: metrics
    spec:      
      containers:
        - image: docker.io/helm/kafka-exporter:1.2.0
          name: kafka-exporter
          args:
            - --kafka.server=my-kafka-cloud-kafka:9092
            - --web.listen-address=:9308
          ports:
            - name: metrics
              containerPort: 9308
          resources: 
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: cloud-kafka/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-kafka-zookeeper
  namespace: kafka-test
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-5.2.0
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  serviceName: my-kafka-zookeeper-headless
  replicas: 3
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/instance: my-kafka
      app.kubernetes.io/component: zookeeper
  template:
    metadata:
      name: my-kafka-zookeeper
      labels:
        app.kubernetes.io/name: zookeeper
        helm.sh/chart: zookeeper-5.2.0
        app.kubernetes.io/instance: my-kafka
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: zookeeper
    spec:
      
      securityContext:
        fsGroup: 1001
      initContainers:
        - name: volume-permissions
          image: docker.io/helm/minideb:stretch
          imagePullPolicy: "Always"
          command: ["chown", "-R", "1001:1001", "/bitnami/zookeeper"]
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/zookeeper
      containers:
        - name: zookeeper
          image: docker.io/helm/zookeeper:3.5.6
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - bash
            - -ec
            - |
                # Execute entrypoint as usual after obtaining ZOO_SERVER_ID based on POD hostname
                HOSTNAME=`hostname -s`
                if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
                  ORD=${BASH_REMATCH[2]}
                  export ZOO_SERVER_ID=$((ORD+1))
                else
                  echo "Failed to get index from hostname $HOST"
                  exit 1
                fi
                exec /entrypoint.sh /run.sh
          resources:
            limits:
              cpu: "1"
              memory: 2048Mi
            requests:
              cpu: 250m
              memory: 256Mi
          env:
            - name: ZOO_PORT_NUMBER
              value: "2181"
            - name: ZOO_TICK_TIME
              value: "2000"
            - name: ZOO_INIT_LIMIT
              value: "10"
            - name: ZOO_SYNC_LIMIT
              value: "5"
            - name: ZOO_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZOO_4LW_COMMANDS_WHITELIST
              value: "srvr, mntr"
            - name: ZOO_SERVERS
              value: my-kafka-zookeeper-0.my-kafka-zookeeper-headless.kafka-test.svc.cluster.local:2888:3888 my-kafka-zookeeper-1.my-kafka-zookeeper-headless.kafka-test.svc.cluster.local:2888:3888 my-kafka-zookeeper-2.my-kafka-zookeeper-headless.kafka-test.svc.cluster.local:2888:3888 
            - name: ZOO_ENABLE_AUTH
              value: "no"
            - name: ZOO_HEAP_SIZE
              value: "1024"
            - name: ZOO_LOG_LEVEL
              value: "ERROR"
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
          ports:
            - name: client
              containerPort: 2181
            - name: follower
              containerPort: 2888
            - name: election
              containerPort: 3888
          livenessProbe:
            tcpSocket:
              port: client
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            tcpSocket:
              port: client
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: data
              mountPath: /bitnami/zookeeper
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "10Gi"
---
# Source: cloud-kafka/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-kafka-cloud-kafka
  namespace: kafka-test
  labels:
    app.kubernetes.io/name: cloud-kafka
    helm.sh/chart: cloud-kafka-7.0.5
    app.kubernetes.io/instance: my-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kafka
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cloud-kafka
      app.kubernetes.io/instance: my-kafka
      app.kubernetes.io/component: kafka
  serviceName: my-kafka-cloud-kafka-headless
  podManagementPolicy: "Parallel"
  replicas: 3
  updateStrategy:
    type: "RollingUpdate"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cloud-kafka
        helm.sh/chart: cloud-kafka-7.0.5
        app.kubernetes.io/instance: my-kafka
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: kafka
    spec:      
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      nodeSelector:
        {}
      tolerations:
        []
      affinity:
        {}
      containers:
        - name: kafka
          image: docker.io/helm/kafka:2.4.0
          imagePullPolicy: "IfNotPresent"
          resources: 
            limits:
              cpu: "2"
              memory: 5Gi
            requests:
              cpu: 500m
              memory: 512Mi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: my-kafka-zookeeper
            - name: KAFKA_PORT_NUMBER
              value: "9092"
            - name: KAFKA_CFG_LISTENERS
              value: "PLAINTEXT://:$(KAFKA_PORT_NUMBER)"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: 'PLAINTEXT://$(MY_POD_NAME).my-kafka-cloud-kafka-headless.kafka-test.svc.cluster.local:$(KAFKA_PORT_NUMBER)'
            - name: JMX_PORT
              value: "5555"
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_CFG_BROKER_ID
              value: "-1"
            - name: KAFKA_CFG_DELETE_TOPIC_ENABLE
              value: "true"
            - name: KAFKA_HEAP_OPTS
              value: "-Xmx4096m -Xms4096m"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES
              value: "40000"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MS
              value: "1000"
            - name: KAFKA_CFG_LOG_RETENTION_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_RETENTION_CHECK_INTERVALS_MS
              value: "300000"
            - name: KAFKA_CFG_LOG_RETENTION_HOURS
              value: "24"
            - name: KAFKA_CFG_MESSAGE_MAX_BYTES
              value: "1000012"
            - name: KAFKA_CFG_LOG_SEGMENT_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_DIRS
              value: /bitnami/kafka/data
            - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_CFG_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
              value: "https"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
              value: "3"
            - name: KAFKA_CFG_NUM_IO_THREADS
              value: "8"
            - name: KAFKA_CFG_NUM_NETWORK_THREADS
              value: "3"
            - name: KAFKA_CFG_NUM_PARTITIONS
              value: "3"
            - name: KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR
              value: "1"
            - name: KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES
              value: "104857600"
            - name: KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS
              value: "6000"
          ports:
            - name: kafka
              containerPort: 9092
          livenessProbe:
            tcpSocket:
              port: kafka
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            tcpSocket:
              port: kafka
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
        
        - name: jmx-exporter
          image: "docker.io/helm/jmx-exporter:0.12.0"
          imagePullPolicy: "IfNotPresent"
          command:
            - java
            - -XX:+UnlockExperimentalVMOptions
            - -XX:+UseCGroupMemoryLimitForHeap
            - -XX:MaxRAMFraction=1
            - -XshowSettings:vm
            - -jar
            - jmx_prometheus_httpserver.jar
            - "5556"
            - /etc/jmx-kafka/jmx-kafka-prometheus.yml
          ports:
            - name: metrics
              containerPort: 5556
          resources: 
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - name: jmx-config
              mountPath: /etc/jmx-kafka
        
      volumes:
        
        - name: jmx-config
          configMap:
            name: my-kafka-cloud-kafka-jmx-configuration
        
        
        
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "100Gi"
